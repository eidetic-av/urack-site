#+TITLE: The Unity Package
#+HUGO_SECTION: development
#+HUGO_WEIGHT: 200
#+HUGO_BASE_DIR: ../../hugo/
#+HUGO_CUSTOM_FRONT_MATTER: :bookToC true

* The Unity Package
** The URack-Player Project
The easiest way to get going is to clone the URack-Player Unity project.

#+BEGIN_LINK
https://github.com/eidetic-av/URack-Player.git
#+END_LINK

This is set up with all the necessary packages and the URack-Unity SDK, along
with the correct render pipeline and project runtime settings.

The URack Player has been developed using Unity 2019.3, so its recommended to
stick with this version for now.

Alternatively, you can install the URack SDK package in your own project.

** Installation in a New Project
Create a new Unity project, or open an existing project that uses the *High
Definition Render Pipeline*, and import the URack package by adding the
following git repository in the package manager:

#+BEGIN_LINK
https://github.com/eidetic-av/URack-Unity.git
#+END_LINK

URack supports only the full .NET Framework runtime, so you need to make sure
that the *API Compatibility Level* of your project is set to *.NET 4.x*, rather
than .NET Standard 2.0. You can change this setting in the project's Player
Settings.

** The UModule Class
*~UModule~* is the base class from which all URack modules derive.

If you're familiar with writing C♯ scripts in Unity, the process for creating a
new module should feel similar — only instead of extending from *~MonoBehaviour~*,
your new script will extend from *~UModule~*, like so:

#+BEGIN_SRC csharp
using Eidetic.URack;

public class MyModule : UModule
{
    // ...
}
#+END_SRC

Public properties that share the same name as a parameter defined in
corresponding VCV Rack plugin code will be automatically connected.

For example, if the parameter +~CAMERA_POSITION_X~+ is defined inside the
module's VCV Rack C++, it will be used to control the property
+~CameraPositionX~+ in Unity.

#+BEGIN_INFO
Note that Rack's C++ code uses the ~SNAKE_CASE~ naming convention for
parameters, while public properties in C♯ should be defined in ~PascalCase~.
#+END_INFO

** Inputs
Public properties annotated with an ~[Input]~ attribute listen for
incoming voltages from VCV.

Here is an example of an input property that changes the X-position of a
GameObject:

#+BEGIN_SRC csharp
[Input]
public float PositionX
{
    set
    {
        var t = SomeGameObject.transform;
        t.position = t.position + Vector3.right * value;
    }
}
#+END_SRC

The ~[Input]~ attribute — along with binding the property to a parameter on the
Rack module — also performs mapping and smoothing of the voltage as its passed
into Unity.

It takes the following /optional/ creation arguments to specify the mapping
behaviour:

#+attr_html: :class method-arguments
| /~float~/ +~minInput~+  | The minimum voltage expected at the input port.<span class="arg-default">This defaults to 0.</span>                                 |
| /~float~/ +~maxInput~+  | The maximum voltage expected at the input port.<span class="arg-default">This defaults to 10. </span>                               |
| /~float~/ +~minOutput~+ | The minimum value of the float mapped into the setter.<span class="arg-default">This defaults to 0. </span>                         |
| /~float~/ +~maxOutput~+ | The maximum value of the float mapped into the setter.<span class="arg-default">This defaults to 10.</span>                         |
| /~bool~/ +~clamp~+      | Whether or not a voltage outside the mapping range should be hard-limited. <span class="arg-default">This defaults to false.</span> |
| /~float~/ +~exponent~+  | The curve the property value is mapped against. <span class="arg-default">This defaults to 1.</span>                                |
| /~float~/ +~smoothing~+ | The amount of damping performed on the property value. <span class="arg-default">This defaults to 3.</span>                         |

If we need to use an input property's value outside of its setter,
auto-implemented properties come in handy:

#+BEGIN_SRC csharp
using Eidetic.URack;
using UnityEngine;

public class MyModule : UModule
{
    GameObject SomeObject;

    [Input(-5, 5, -180, 180)]
    public float RotateXAxis { get; set; }

    public void Update()
    {
        var t = SomeObject.transform;
        t.RotateAround(t.position, Vector3.left, RotateXAxis);
    }
}
#+END_SRC

** Outputs

** Bundled Assets

** Module Prefabs
** The VFXModule Class
** Exporting Modules as Plugins
